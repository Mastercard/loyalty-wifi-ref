/*
 * Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Wifi API
 * The Loyalty Boingo Wifi API offers cardholders, via their issuers, the ability to search and connect to Mastercard Global Wifi hotspots around the world through this digital channel. These APIs can be used to build a rich, interactive wifi experience within the issuer's existing mobile or web application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_wifi_client.api;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.when;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.mastercard.developer.loyalty_wifi_client.ApiClient;
import com.mastercard.developer.loyalty_wifi_client.ApiException;
import com.mastercard.developer.loyalty_wifi_client.ApiResponse;
import com.mastercard.developer.loyalty_wifi_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_wifi_client.model.Hotspot;
import com.squareup.okhttp.Call;

/**
 * API tests for WiFiApi
 */
public class WiFiApiTest {

    private WiFiApi api;
    
    @Mock
    private ApiClient apiClientMock;
    
    @Mock
    private Call call;
    
    
    @Before
    public void setUp() throws ApiException {
    	MockitoAnnotations.initMocks(this);
    	api = new WiFiApi(apiClientMock);
    	when(apiClientMock.buildCall(any(String.class), any(String.class), any(List.class), any(List.class), any(Object.class), any(Map.class), any(Map.class), any(String[].class), (ProgressRequestBody.ProgressRequestListener)isNull())).thenReturn(call);
    }

    
    /**
     * Find Wi-Fi hotspots nearby
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @SuppressWarnings("rawtypes")
    @Test
    public void loyaltyWifiHotspotsGetTest() throws ApiException {
        String latitude = "1.2345";
        String longitude = "1.234";
        Integer radius = 10;
        List<Hotspot> hotspots = new ArrayList<>();
        Hotspot hotspot = new Hotspot();
        hotspot.setCity("St.Louis");
        hotspots.add(hotspot);
        ApiResponse resp = new ApiResponse(200, null, hotspots);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        List<Hotspot> response = api.loyaltyWifiHotspotsGet(latitude, longitude, radius);
        assertEquals(response, hotspots);
    }
    
    @SuppressWarnings("rawtypes")
    @Test(expected = ApiException.class)
    public void loyaltyWifiHotspotsGetTest_Exception() throws ApiException {
        String latitude = null;
        String longitude = "1.234";
        Integer radius = 10;
        List<Hotspot> hotspots = new ArrayList<>();
        Hotspot hotspot = new Hotspot();
        hotspot.setCity("St.Louis");
        hotspots.add(hotspot);
        ApiResponse resp = new ApiResponse(200, null, hotspots);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.loyaltyWifiHotspotsGet(latitude, longitude, radius);
    }
    
}
