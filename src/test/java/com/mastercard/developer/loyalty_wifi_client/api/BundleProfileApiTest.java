/*
 * Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Wifi API
 * The Loyalty Boingo Wifi API offers cardholders, via their issuers, the ability to search and connect to Mastercard Global Wifi hotspots around the world through this digital channel. These APIs can be used to build a rich, interactive wifi experience within the issuer's existing mobile or web application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_wifi_client.api;

import static org.junit.Assert.assertEquals;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.ArgumentMatchers.isNull;
import static org.mockito.Mockito.when;

import java.lang.reflect.Type;
import java.util.List;
import java.util.Map;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import com.mastercard.developer.loyalty_wifi_client.ApiClient;
import com.mastercard.developer.loyalty_wifi_client.ApiException;
import com.mastercard.developer.loyalty_wifi_client.ApiResponse;
import com.mastercard.developer.loyalty_wifi_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUser;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUserPatch;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUserResponse;
import com.squareup.okhttp.Call;

/**
 * API tests for BundleProfileApi
 */
public class BundleProfileApiTest {

private BundleProfileApi api;
    
    @Mock
    private ApiClient apiClientMock;
    
    @Mock
    private Call call;
    
    
    @Before
    public void setUp() throws ApiException {
    	MockitoAnnotations.initMocks(this);
    	api = new BundleProfileApi(apiClientMock);
    	when(apiClientMock.buildCall(any(String.class), any(String.class), any(List.class), any(List.class), any(Object.class), any(Map.class), any(Map.class), any(String[].class), (ProgressRequestBody.ProgressRequestListener)isNull())).thenReturn(call);
    }

    
    /**
     * Create Profile
     *
     * Create Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createUserTest() throws ApiException {
        BundleUser bundleUser = new BundleUser();
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        BundleUserResponse response = api.createUser(bundleUser);
        assertEquals(response, bundleUserResp);
    }
    
    @Test(expected = ApiException.class)
    public void createUserTest_Exception() throws ApiException {
        BundleUser bundleUser = null;
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        api.createUser(bundleUser);
    }
    
    /**
     * Partially Update Profile
     *
     * Partial updates of Profile user and associated product service(s) consents and card account(s)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void patchUserTest() throws ApiException {
        String userId = "userId";
        BundleUserPatch bundleUserPatch = new BundleUserPatch();
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        when(apiClientMock.escapeString(userId)).thenReturn(userId);
        BundleUserResponse response = api.patchUser(userId, bundleUserPatch);
        assertEquals(bundleUserResp, response);
    }
    
    
    @Test(expected = ApiException.class)
    public void patchUserTest_Exception() throws ApiException {
        String userId = null;
        BundleUserPatch bundleUserPatch = null;
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        when(apiClientMock.escapeString(userId)).thenReturn(userId);
        api.patchUser(userId, bundleUserPatch);
    }
    
    /**
     * Find User by Id
     *
     * Returns a Users on the basis of provided id as path param (https://tools.ietf.org/html/draft-ietf-scim-api-19#section-3.4.2.1)
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void readUserTest() throws ApiException {
        String userId = "userId";
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        when(apiClientMock.escapeString(userId)).thenReturn(userId);
        BundleUserResponse response = api.readUser(userId);
        assertEquals(bundleUserResp, response);
    }
    
    @Test(expected = ApiException.class)
    public void readUserTest_Exception() throws ApiException {
        String userId = null;
        BundleUserResponse bundleUserResp = new BundleUserResponse();
        ApiResponse resp = new ApiResponse(200, null, bundleUserResp);
        when(apiClientMock.execute(any(Call.class), any(Type.class))).thenReturn(resp);
        when(apiClientMock.escapeString(userId)).thenReturn(userId);
        api.readUser(userId);
    }
    
}
