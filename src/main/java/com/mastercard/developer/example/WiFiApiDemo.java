/*
 * Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Wifi API
 * The Loyalty Boingo Wifi API offers cardholders, via their issuers, the ability to search and connect to Mastercard Global Wifi hotspots around the world through this digital channel. These APIs can be used to build a rich, interactive wifi experience within the issuer's existing mobile or web application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package com.mastercard.developer.example;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.mastercard.developer.interceptors.OkHttp2OAuth1Interceptor;
import com.mastercard.developer.loyalty_wifi_client.ApiClient;
import com.mastercard.developer.loyalty_wifi_client.api.BundleProfileApi;
import com.mastercard.developer.loyalty_wifi_client.api.WiFiApi;
import com.mastercard.developer.loyalty_wifi_client.model.Account;
import com.mastercard.developer.loyalty_wifi_client.model.AccountExternal;
import com.mastercard.developer.loyalty_wifi_client.model.Address;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUser;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUserData;
import com.mastercard.developer.loyalty_wifi_client.model.BundleUserResponse;
import com.mastercard.developer.loyalty_wifi_client.model.Consent;
import com.mastercard.developer.loyalty_wifi_client.model.Credentials;
import com.mastercard.developer.loyalty_wifi_client.model.Email;
import com.mastercard.developer.loyalty_wifi_client.model.Hotspot;
import com.mastercard.developer.loyalty_wifi_client.model.Identification;
import com.mastercard.developer.loyalty_wifi_client.model.Im;
import com.mastercard.developer.loyalty_wifi_client.model.Name;
import com.mastercard.developer.loyalty_wifi_client.model.PhoneNumber;
import com.mastercard.developer.loyalty_wifi_client.model.Photo;
import com.mastercard.developer.loyalty_wifi_client.model.User;
import com.mastercard.developer.loyalty_wifi_client.model.UserProduct;

public class WiFiApiDemo {

	public static void main(String[] args) throws Exception {

		RequestHelper.loadProperties();

		ApiClient apiClient = new ApiClient();
		apiClient.setBasePath(RequestHelper.getBaseURL());
		apiClient.getHttpClient().interceptors()
				.add(new OkHttp2OAuth1Interceptor(RequestHelper.getConsumerkey(), RequestHelper.getPrivateKey()));
		apiClient.setDebugging(true);

		BundleProfileApi bundleProfileApi = new BundleProfileApi(apiClient);

		if (runThisScenario(args, "registration")) {
			executeRegistrationScenario(bundleProfileApi);
		}

		if (runThisScenario(args, "hotspot")) {
			WiFiApi wifiApi = new WiFiApi(apiClient);
			executeWifiHotspot(wifiApi);
		}

		if (runThisScenario(args, "error")) {
			executeErrorScenario(bundleProfileApi);
		}

	}

	private static void executeRegistrationScenario(BundleProfileApi bundleProfileApi) {
		BundleUser bundleUser = getRegistrationObject();
		try {
			printMessage("STARTING WIFI REGISTRATION FROM COMMAND LINE RUNNER");
			BundleUserResponse result = bundleProfileApi.createUser(bundleUser);
			System.out.println("Parsed Response---------------");
			System.out.println(result);
		} catch (Exception e) {
			System.err.println("Exception when calling Registration");
			e.printStackTrace();
		}
	}

	private static void executeErrorScenario(BundleProfileApi bundleProfileApi) {
		BundleUser bundleUser = getErrorRegistrationObject();

		try {
			printMessage("STARTING REGISTRATION ERROR FROM COMMAND LINE RUNNER");
			BundleUserResponse result = bundleProfileApi.createUser(bundleUser);
			System.out.println("Parsed Response---------------");
			System.out.println(result);
		} catch (Exception e) {
			System.err.println("Exception when calling Registration");
			e.printStackTrace();
		}
	}

	private static void executeWifiHotspot(WiFiApi wifiApi) {
		try {
			printMessage("STARTING GET HOTSPOTS FROM COMMAND LINE RUNNER");
			String latitude = "77.11112223331";
			String longitude = "149.99999999";
			Integer radius = 200;
			List<Hotspot> result = wifiApi.loyaltyWifiHotspotsGet(latitude, longitude, radius);
			System.out.println("Parsed Response---------------");
			System.out.println(result);
		} catch (Exception e) {
			System.err.println("Exception when calling wifi hotspots");
			e.printStackTrace();
		}
	}

	private static BundleUser getErrorRegistrationObject() {
		BundleUser bundleUser = getRegistrationObject();
		bundleUser.getData().getUser().getName().setGivenName("");
		return bundleUser;
	}

	private static BundleUser getRegistrationObject() {
		Address address = new Address();
		address.setCountry("US");
		address.setFormatted("114 5th Ave, New York, NY 10011");
		address.setLocality("city");
		address.setOperation("None");
		address.setPostalCode("10011");
		address.setPrimary(false);
		address.setRegion("NY");
		address.setStreetAddress("114 5th Ave");
		address.setStreetAddress2("Suite 20");
		address.setType("work");

		User user = new User();
		user.setAddresses(Collections.singletonList(address));

		user.setActive(true);
		user.setDateOfBirth("1992-11-17");
		user.setDisplayName("John F Smith");
		user.setExternalId("user123-partnerBank");
		user.setId("d3459481-fb1c-48bb-8685-40eb629e2ae1");
		user.locale("en-US");

		Email email = new Email();
		email.setDisplay("Primary email address of user");
		email.setOperation("None");
		email.setPrimary(true);
		email.setType("home");
		email.setValue("john5033379289074369@gmail.com");
		user.setEmails(Collections.singletonList(email));

		Identification identification = new Identification();
		identification.setCountry("BR");
		identification.setType("CPF");
		identification.setValue("496881234");
		user.setIdentifications(Collections.singletonList(identification));

		Im im = new Im();
		im.setDisplay("user Yahoo-id");
		im.setOperation("None");
		im.setPrimary(true);
		im.setType("aim");
		im.setValue("JohnFSmith123");
		user.setIms(Collections.singletonList(im));

		Name name = new Name();
		name.setFamilyName("Smitherines");
		name.setFormatted("Sally Smitherines");
		name.setGivenName("Sally");
		name.setHonorificPrefix("Ms.");
		name.setHonorificSuffix("Sr.");
		name.setMiddleName("F");
		user.setName(name);

		user.setNickName("sallySmith");
		user.setPassword("boingouser5105363487498185");

		PhoneNumber phoneNumber = new PhoneNumber();
		phoneNumber.setDisplay("Office fax of user");
		phoneNumber.setOperation("None");
		phoneNumber.setPrimary(false);
		phoneNumber.setType("fax");
		phoneNumber.setValue("+1-201-555-0123");
		user.setPhoneNumbers(Collections.singletonList(phoneNumber));

		Photo photo = new Photo();
		photo.setDisplay("portrait");
		photo.setOperation("None");
		photo.setPrimary(true);
		photo.setType("thumbnail");
		photo.setValue("facebook.com/JohnFSmith123/photos/1");
		user.setPhotos(Collections.singletonList(photo));

		user.setPreferredLanguage("en");
		user.setProfileUrl("facebook.com/JohnFSmith123");
		user.setTimezone("America/New_York");
		user.setTitle("Vice President");
		user.setUserId("user123-partnerBank");
		user.setUserName("JohnFSmith123");
		user.setUserType("Intern");

		Account account = new Account();
		account.setAccountType("SingleMember");
		account.setBrand("Mastercard");
		account.setCardAlias("d3459481-fb1c-48bb-8685-40eb629e2ae1");
		account.setCardExpiryDate("02/2024");
		account.setCvcCode("876");
		account.setIca(12594L);
		account.setLast4Pan(8185);
		account.setNameOnCard("SALLY SMITHERINES");
		account.setPan("5105363487498185");
		account.setPar("q1hjz28rka1ebl470g9xyg90r5d3e");
		account.setPrimary(true);
		account.setProductLine("Credit cards");
		account.setProductType("Black");
		account.setUuid("d3459481-fb1c-48bb-8685-40eb629e2ae1");

		AccountExternal accountExternal = new AccountExternal();
		accountExternal.setAccountStatusCode("1");
		accountExternal.setExternalMembershipReferenceId("B12345");
		account.setObject(accountExternal);

		Consent consent = new Consent();
		consent.setAgreed(true);
		consent.setConsentType("author-legal-content-document");
		consent.setConsentedDate("2018-06-19T12:30:42.307+0000");
		consent.setCountry("BRA");
		consent.setLanguage("en_us");
		consent.setServiceCode("priceless");
		consent.setServiceFunctionCode("registration-page code");
		consent.setUseCategoryCode("UC-01");
		consent.setUseCategoryValue("acceptPersonalizedOffersEmail");
		consent.setUuid("d3459481-fb1c-48bb-8685-40eb629e2ae1");

		Credentials productCredentials = new Credentials();
		productCredentials.setUsername("boingoid123");
		productCredentials.setPassword("boingopwd");

		UserProduct userProduct = new UserProduct();
		userProduct.setProduct("wifi");
		userProduct.setAccounts(Collections.singletonList(account));
		userProduct.setConsents(Collections.singletonList(consent));
		userProduct.setObject(productCredentials);
		List<UserProduct> products = new ArrayList<>();
		products.add(userProduct);

		BundleUserData bundleUserData = new BundleUserData();
		bundleUserData.setProducts(products);
		bundleUserData.setUser(user);

		BundleUser bundleUser = new BundleUser();
		bundleUser.setData(bundleUserData);

		return bundleUser;
	}

	private static void printMessage(String scenario) {
		System.out.println("--------------------------------------------------------------------");
		System.out.println("--------------------------------------------------------------------");
		System.out.println(scenario + "---------------");
		System.out.println("--------------------------------------------------------------------");
		System.out.println("--------------------------------------------------------------------");
	}

	private static boolean runThisScenario(String[] args, String scenario) {
		return (args != null && args.length > 0 && args[0].contains(scenario)) || (args == null || args.length == 0);
	}

}
