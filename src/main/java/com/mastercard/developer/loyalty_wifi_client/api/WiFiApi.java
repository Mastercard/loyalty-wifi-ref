/*
 * Copyright (c) 2019 Mastercard
 
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
 
    http://www.apache.org/licenses/LICENSE-2.0
 
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

 * 
 * Loyalty Wifi API
 * The Loyalty Boingo Wifi API offers cardholders, via their issuers, the ability to search and connect to Mastercard Global Wifi hotspots around the world through this digital channel. These APIs can be used to build a rich, interactive wifi experience within the issuer's existing mobile or web application.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: loyalty-benefits-support@mastercard.flowdock.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.mastercard.developer.loyalty_wifi_client.api;

import com.mastercard.developer.loyalty_wifi_client.ApiCallback;
import com.mastercard.developer.loyalty_wifi_client.ApiClient;
import com.mastercard.developer.loyalty_wifi_client.ApiException;
import com.mastercard.developer.loyalty_wifi_client.ApiResponse;
import com.mastercard.developer.loyalty_wifi_client.Configuration;
import com.mastercard.developer.loyalty_wifi_client.Pair;
import com.mastercard.developer.loyalty_wifi_client.ProgressRequestBody;
import com.mastercard.developer.loyalty_wifi_client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.mastercard.developer.loyalty_wifi_client.model.ErrorItems;
import com.mastercard.developer.loyalty_wifi_client.model.Hotspot;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WiFiApi {
    private ApiClient apiClient;
    
    private static String RESOURCE_URL_PREFIX = "/loyalty/wifi/reference";

    public WiFiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WiFiApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for loyaltyWifiHotspotsGet
     * @param latitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param longitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param radius Search radius in meters.  Defaults to 500. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call loyaltyWifiHotspotsGetCall(String latitude, String longitude, Integer radius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = RESOURCE_URL_PREFIX + "/hotspots";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (latitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("latitude", latitude));
        }

        if (longitude != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("longitude", longitude));
        }

        if (radius != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("radius", radius));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call loyaltyWifiHotspotsGetValidateBeforeCall(String latitude, String longitude, Integer radius, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'latitude' is set
        if (latitude == null) {
            throw new ApiException("Missing the required parameter 'latitude' when calling loyaltyWifiHotspotsGet(Async)");
        }
        
        // verify the required parameter 'longitude' is set
        if (longitude == null) {
            throw new ApiException("Missing the required parameter 'longitude' when calling loyaltyWifiHotspotsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = loyaltyWifiHotspotsGetCall(latitude, longitude, radius, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Find Wi-Fi hotspots nearby
     * 
     * @param latitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param longitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param radius Search radius in meters.  Defaults to 500. (optional)
     * @return List&lt;Hotspot&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<Hotspot> loyaltyWifiHotspotsGet(String latitude, String longitude, Integer radius) throws ApiException {
        ApiResponse<List<Hotspot>> resp = loyaltyWifiHotspotsGetWithHttpInfo(latitude, longitude, radius);
        return resp.getData();
    }

    /**
     * Find Wi-Fi hotspots nearby
     * 
     * @param latitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param longitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param radius Search radius in meters.  Defaults to 500. (optional)
     * @return ApiResponse&lt;List&lt;Hotspot&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<Hotspot>> loyaltyWifiHotspotsGetWithHttpInfo(String latitude, String longitude, Integer radius) throws ApiException {
        com.squareup.okhttp.Call call = loyaltyWifiHotspotsGetValidateBeforeCall(latitude, longitude, radius, null, null);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Find Wi-Fi hotspots nearby (asynchronously)
     * 
     * @param latitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param longitude Geographical coordinate of a place to find nearby hotspots (required)
     * @param radius Search radius in meters.  Defaults to 500. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call loyaltyWifiHotspotsGetAsync(String latitude, String longitude, Integer radius, final ApiCallback<List<Hotspot>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = loyaltyWifiHotspotsGetValidateBeforeCall(latitude, longitude, radius, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<Hotspot>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
